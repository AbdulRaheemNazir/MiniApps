using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;


namespace MyApplication
{
    public class MainClass
    {
        internal static void Main()
        {

            char choice;


            do
            {
                Console.WriteLine("P4CS Mini Applications");
                Console.WriteLine("----------------------");
                Console.WriteLine("Please select an option:");
                Console.WriteLine("1) Keep Counting");
                Console.WriteLine("2) Square Root Calculator");
                Console.WriteLine("3) Encrypt Text (Caesar Cipher)");
                Console.WriteLine("4) Decrypt Text (Caesar Cipher)");
                Console.WriteLine("9) Quit");




                choice = Console.ReadKey().KeyChar;
                if (choice == '9') break;


            } while (choice < '1' | choice > '8' & choice != 'q');



            Console.WriteLine("\n");

            switch (choice)
            {
                case '1':
                    Optionone();
                    break;
                case '2':
                    Optiontwo();
                    break;
                case '3':
                    Optionthree();
                    break;
                case '4':
                    Optionfour();
                    break;

            }

        }




        /*Used for the Decipher*/
        public static char cipher2(char ch, int key)
        {
            if (!char.IsLetter(ch))
            {

                return ch;
            }

            char d = char.IsUpper(ch) ? 'A' : 'a';
            return (char)((((ch - key) - d) % 26) + d);


        }



        public static string Decipher2(string input, int key)
        {
            string output = string.Empty;

            foreach (char ch in input)
                output += cipher2(ch, key);

            return output;
        }


        public static string Decipher3(string input, int key)
        {
            return Encipher(input, 26 - key);
        }




        /*Used for the Encipher*/

        public static char cipher(char ch, int key)
        {
            if (!char.IsLetter(ch))
            {

                return ch;
            }

            char d = char.IsUpper(ch) ? 'A' : 'a';
            return (char)((((ch + key) - d) % 26) + d);


        }


        public static string Encipher(string input, int key)
        {
            string output = string.Empty;

            foreach (char ch in input)
                output += cipher(ch, key);

            return output;
        }


        public static string Decipher(string input, int key)
        {
            return Encipher(input, 26 - key);
        }



        /*Options*/

        static void Optionone()
        {
            Console.WriteLine("Keep Counting");
            Console.WriteLine("--------------");
            Console.WriteLine("You will be presented with 10 arithmetic questions.");
            Console.WriteLine("After the first question, the left-hand operand is the result of the previous addition.");
            Console.WriteLine(" ");
            //       Random symb = new Random();
            //     int symbol = symb.Next(-1, +1);

            int sameanswer = 0;
            //         bool onlyOnce = false;          i might need it for when wrong
            Random rnd = new Random();
            int donkey = 0;
            int numberx = rnd.Next(1, 10);

            int counter = 0;
            try
            {
                for (int b = 1; b < 11; b++)
                {


                    int numbery = rnd.Next(1, 10);
                    sameanswer = numberx + numbery;



                    Console.Write("Question " + b + ":" + "   ");
                    Console.WriteLine(numberx + " " + "+" + " " + numbery);
                    Console.ReadLine();
                    sameanswer = Convert.ToInt32(Console.ReadLine());

                    donkey = numberx + numbery;


                    if (sameanswer != donkey)
                    {
                        Console.WriteLine("incorrect");
                        Console.WriteLine(" ");
                        Console.WriteLine(numberx + numbery);
                        numberx = donkey;


                    }
                    else
                    {
                        numberx = donkey;
                        Console.WriteLine("Correct");
                        counter = counter + 1;
                    }
                }
            }

            catch
            {
                Console.WriteLine("Invalid Input");
            }


            Console.WriteLine("You got " + counter + " out of 10 questions correct");
            Console.ReadLine();
        }




        static void Optiontwo()
        {
            try
            {
                int number;
                Console.WriteLine("Enter a whole, positive number: ");
                number = Convert.ToInt32(Console.ReadLine());

                int shift2;
                Console.WriteLine("Enters the number of decimal places for the precision square root result (Range 1-->6): ");
                shift2 = Convert.ToInt32(Console.ReadLine());




                double root = 1;
                int i = 0;
                //The Babylonian Method for Computing Square Roots
                while (true)
                {
                    i = i + 1;
                    root = (number / root + root) / 2;
                    if (i == number + 1) { break; }
                }




                //Output
                double shift3;
                shift3 = Math.Round((double)root, shift2, MidpointRounding.ToEven);
                Console.WriteLine("Square root:" + shift3);

                Console.ReadLine();


            }


            catch
            {
                Console.WriteLine("Invalid Input");
            }
        }
  



        static void Optionthree()
        {
            Console.WriteLine("Type a string to encrypt:");
            string UserString = Console.ReadLine();
            Regex r = new Regex("^[a-zA-Z ]+$");
            if (r.IsMatch(UserString))
            {
                Console.WriteLine("\n");
                Console.Write("Enter your Key");
                int key = Convert.ToInt32(Console.ReadLine());
                Console.WriteLine("\n");
                Console.WriteLine("Encrypted Data");
                string cipherText = Encipher(UserString, key);
                Console.WriteLine(cipherText);
                Console.Write("\n");
                Console.ReadKey();
            }
            else
            {
                Console.WriteLine("Invalid Input");
                Optionthree();
            }
        }



        static void Optionfour()
        {
            Console.WriteLine("Type a string to decrypt:");
            string UserString = Console.ReadLine();
            Regex r = new Regex("^[a-zA-Z ]+$");

            if (r.IsMatch(UserString))
            {

                Console.WriteLine("\n");

                Console.Write("Enter your Key");
                int key = Convert.ToInt32(Console.ReadLine());
                Console.WriteLine("\n");

                string cipherText = Decipher2(UserString, key);
                string t = Decipher3(cipherText, key);
                Console.WriteLine("Decrypted Data:");
                Console.WriteLine(cipherText);
                Console.Write("\n");
                Console.ReadKey();
            }
            else
            {
                Console.WriteLine("Invalid Input");
                Optionfour();
            }
        }


    }
}
